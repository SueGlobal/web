# -*- encoding : utf-8 -*-
class UniversityDecorator < Draper::Base
  decorates :university

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end

  def render_services
    render_dependent_models :services, 'service_line_item', Service
  end

  def render_achieved_activities
    render_dependent_models :achieved_activities, 'achieved_activity_line_item', AchievedActivity
  end

  def render_general_frames
    render_dependent_models :first_general_frames, 'general_frame_line_item', GeneralFrame
  end
  def render_student_studies
    render_dependent_models :student_studies, "study_line_item", StudentStudy
  end

  def render_employer_studies
    render_dependent_models :employer_studies, "study_line_item", EmployerStudy
  end

  def render_public_source_studies
    render_dependent_models :public_source_studies, "study_line_item", PublicSourceStudy
  end

  def render_agreement_source_studies
    render_dependent_models :agreement_source_studies, "study_line_item", AgreementSourceStudy
  end

  def render_database_studies
    render_dependent_models :database_studies, "study_line_item", DatabaseStudy
  end

  def render_other_studies
    render_dependent_models :other_studies, "study_line_item", OtherStudy
  end

  def render_dependent_models assoc, item_partial, klass = nil
    b = h.render partial: 'university_dependent_model_list',
              locals: locals_for_dependent_models_partial(assoc, item_partial, klass)
    b
  end

  def locals_for_dependent_models_partial(assoc, item_partial, klass)
    Hash.new.tap do |locals|
      locals[:objects] = university.send(assoc)
      locals[:item_partial] = item_partial
      locals[:university] = university
      locals[:klass] = klass || Object.const_get(assoc.to_s.singularize.camelize)
      locals[:model_name] = locals[:klass].name.underscore
      locals[:model_name_plural] = locals[:model_name].pluralize
    end
  end

  def general_frame_years
    @general_frame_years ||= GeneralFrame.where(university_id: university.id).order('year ASC').uniq.pluck(:year)
  end

  def miss_general_frame_years general_frame=nil
    @miss_general_frame_years ||= (2000..Time.zone.now.year).to_a - general_frame_years
    if general_frame && general_frame.year
      (@miss_general_frame_years | [general_frame.year]).sort
    else
      @miss_general_frame_years
    end
  end

  def general_frame_academic_years
    general_frame_years.map { |y| to_academic_course(y) }
  end

  def miss_general_frame_academic_years_for_select
    miss_general_frame_academic_years.zip miss_general_frame_years
  end

  def miss_general_frame_academic_years
    miss_general_frame_years.map { |y| to_academic_course(y) }
  end

  def to_academic_course year
    "#{year}/#{year-1999}"
  end

  def community_name
    if university.community
      university.community.name
    else
      h.content_tag :em, I18n.t('university_decorator.no_community_name')
    end
  end
end
