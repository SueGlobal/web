class IndexDecorator < Draper::Base
  decorates :index

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end

  def render_source
    render_dependent_models :source
  end

  def render_periodicity
    render_dependent_models :periodicity
  end

  def render_methodology
    render_dependent_models :methodology_url, 'methodology'
  end

  def render_segmentation_variables
    render_dependent_models :segmentation_variables
  end

  def render_dependent_models assoc, item_partial=assoc.to_s
    h.render partial: item_partial,
              object: index.send(assoc)
  end

  def source_name
    if index.source
      index.source.name
    else
      h.content_tag :em do
        t2('source.none')
      end
    end
  end

  def periodicity_type
    if index.periodicity
      index.periodicity.periodicity_type
    else
      h.content_tag :em do
        t2('periodicity.none')
      end
    end
  end

  def with_content_tag tag
    h.content_tag_for tag, index do
      yield if block_given?
    end
  end

  protected
  def t2 path
    I18n.t path, scope: 'index_decorator'
  end
end
